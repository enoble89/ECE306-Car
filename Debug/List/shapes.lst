###############################################################################
#
# IAR C/C++ Compiler V6.40.1.950/W32 for MSP430           17/Feb/2016  17:52:25
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.40
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\Evan Noble\Desktop\ECE306 Car\shapes.c
#    Command line  =  
#        "C:\Users\Evan Noble\Desktop\ECE306 Car\shapes.c" -lC "C:\Users\Evan
#        Noble\Desktop\ECE306 Car\Debug\List" -o "C:\Users\Evan
#        Noble\Desktop\ECE306 Car\Debug\Obj" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --debug -D__MSP430FR5739__ -e --double=32
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\430\lib\dlib\dl430xlsfn.h" --core=430X --data_model=small -On
#        --multiplier=32 --hw_workaround=CPU40 --code_model=large
#    List file     =  
#        C:\Users\Evan Noble\Desktop\ECE306 Car\Debug\List\shapes.lst
#    Object file   =  
#        C:\Users\Evan Noble\Desktop\ECE306 Car\Debug\Obj\shapes.r43
#
###############################################################################

C:\Users\Evan Noble\Desktop\ECE306 Car\shapes.c
      1          //------------------------------------------------------------------------------
      2          //  File Name : shapes.c
      3          //
      4          //  Description: This file contains the functions for doing the shapes for 
      5          //               project. 3
      6          //
      7          //  Evan Noble
      8          //  Feb 2016
      9          //  Built with IAR Embedded Workbench Version: V7.3.1.3987 (6.40.1)
     10          //------------------------------------------------------------------------------
     11          
     12          #include "macros.h"
     13          #include "globals.h"
     14          #include "msp430.h"
     15          #include "functions.h"
     16          

   \                                 In  segment CODE, align 2
     17          void StraightLine(int straightLineTime) {
   \                     StraightLine:
   \   000000   1B15         PUSHM.W #0x2, R11
   \   000002   0A4C         MOV.W   R12, R10
     18            int x;
     19            for(x=0;x<straightLineTime;x++) {
   \   000004   0B43         MOV.W   #0x0, R11
   \                     ??StraightLine_0:
   \   000006   0B9A         CMP.W   R10, R11
   \   000008   1134         JGE     ??StraightLine_1
     20              RightMotorForward();
   \   00000A   ........     CALLA   #RightMotorForward
     21              LeftMotorForward();
   \   00000E   ........     CALLA   #LeftMotorForward
     22              five_msec_sleep(5);
   \   000012   3C400500     MOV.W   #0x5, R12
   \   000016   ........     CALLA   #five_msec_sleep
     23              LeftMotorOff();
   \   00001A   ........     CALLA   #LeftMotorOff
     24              five_msec_sleep(4);
   \   00001E   2C42         MOV.W   #0x4, R12
   \   000020   ........     CALLA   #five_msec_sleep
     25              RightMotorOff();
   \   000024   ........     CALLA   #RightMotorOff
     26            }
   \   000028   1B53         ADD.W   #0x1, R11
   \   00002A   ED3F         JMP     ??StraightLine_0
     27           
     28          }
   \                     ??StraightLine_1:
   \   00002C   1A17         POPM.W  #0x2, R11
   \   00002E   1001         RETA
     29          

   \                                 In  segment CODE, align 2
     30          void RightCircle(int circleTime) {
   \                     RightCircle:
   \   000000   1B15         PUSHM.W #0x2, R11
   \   000002   0A4C         MOV.W   R12, R10
     31            int ecn;
     32            for(ecn=0;ecn<circleTime;ecn++) {
   \   000004   0B43         MOV.W   #0x0, R11
   \                     ??RightCircle_0:
   \   000006   0B9A         CMP.W   R10, R11
   \   000008   1034         JGE     ??RightCircle_1
     33              RightMotorForward();
   \   00000A   ........     CALLA   #RightMotorForward
     34              LeftMotorForward();
   \   00000E   ........     CALLA   #LeftMotorForward
     35              five_msec_sleep(2);
   \   000012   2C43         MOV.W   #0x2, R12
   \   000014   ........     CALLA   #five_msec_sleep
     36              LeftMotorOff();
   \   000018   ........     CALLA   #LeftMotorOff
     37              five_msec_sleep(4);
   \   00001C   2C42         MOV.W   #0x4, R12
   \   00001E   ........     CALLA   #five_msec_sleep
     38              RightMotorOff();
   \   000022   ........     CALLA   #RightMotorOff
     39            }
   \   000026   1B53         ADD.W   #0x1, R11
   \   000028   EE3F         JMP     ??RightCircle_0
     40          }
   \                     ??RightCircle_1:
   \   00002A   1A17         POPM.W  #0x2, R11
   \   00002C   1001         RETA
     41          

   \                                 In  segment CODE, align 2
     42          void LeftCircle(int circleTime) {
   \                     LeftCircle:
   \   000000   1B15         PUSHM.W #0x2, R11
   \   000002   0A4C         MOV.W   R12, R10
     43            int lcx;
     44            for(lcx=0;lcx<circleTime;lcx++) {
   \   000004   0B43         MOV.W   #0x0, R11
   \                     ??LeftCircle_0:
   \   000006   0B9A         CMP.W   R10, R11
   \   000008   1034         JGE     ??LeftCircle_1
     45              RightMotorForward();
   \   00000A   ........     CALLA   #RightMotorForward
     46              LeftMotorForward();
   \   00000E   ........     CALLA   #LeftMotorForward
     47              five_msec_sleep(2);
   \   000012   2C43         MOV.W   #0x2, R12
   \   000014   ........     CALLA   #five_msec_sleep
     48              RightMotorOff();
   \   000018   ........     CALLA   #RightMotorOff
     49              five_msec_sleep(4);
   \   00001C   2C42         MOV.W   #0x4, R12
   \   00001E   ........     CALLA   #five_msec_sleep
     50              LeftMotorOff();
   \   000022   ........     CALLA   #LeftMotorOff
     51            }
   \   000026   1B53         ADD.W   #0x1, R11
   \   000028   EE3F         JMP     ??LeftCircle_0
     52          }
   \                     ??LeftCircle_1:
   \   00002A   1A17         POPM.W  #0x2, R11
   \   00002C   1001         RETA
     53          

   \                                 In  segment CODE, align 2
     54          void TriangleTurn(int turnTime) {
   \                     TriangleTurn:
   \   000000   0A12         PUSH.W  R10
   \   000002   0A4C         MOV.W   R12, R10
     55            RightMotorForward();
   \   000004   ........     CALLA   #RightMotorForward
     56            five_msec_sleep(turnTime);
   \   000008   0C4A         MOV.W   R10, R12
   \   00000A   ........     CALLA   #five_msec_sleep
     57            RightMotorOff();
   \   00000E   ........     CALLA   #RightMotorOff
     58          }
   \   000012   3A41         POP.W   R10
   \   000014   1001         RETA
     59          

   \                                 In  segment CODE, align 2
     60          void Triangle(void) {
   \                     Triangle:
   \   000000   0A12         PUSH.W  R10
     61            int triangleSides;
     62            for(triangleSides=0;triangleSides<6;triangleSides++) {
   \   000002   0A43         MOV.W   #0x0, R10
   \                     ??Triangle_0:
   \   000004   3A900600     CMP.W   #0x6, R10
   \   000008   1234         JGE     ??Triangle_1
     63              five_msec_sleep(50);
   \   00000A   3C403200     MOV.W   #0x32, R12
   \   00000E   ........     CALLA   #five_msec_sleep
     64              StraightLine(10);
   \   000012   3C400A00     MOV.W   #0xa, R12
   \   000016   ........     CALLA   #StraightLine
     65              five_msec_sleep(50);
   \   00001A   3C403200     MOV.W   #0x32, R12
   \   00001E   ........     CALLA   #five_msec_sleep
     66              TriangleTurn(37);
   \   000022   3C402500     MOV.W   #0x25, R12
   \   000026   ........     CALLA   #TriangleTurn
     67            }
   \   00002A   1A53         ADD.W   #0x1, R10
   \   00002C   EB3F         JMP     ??Triangle_0
     68          }
   \                     ??Triangle_1:
   \   00002E   3A41         POP.W   R10
   \   000030   1001         RETA
     69          

   \                                 In  segment CODE, align 2
     70          void FigureEight() {
   \                     FigureEight:
     71            RightCircle(1);
   \   000000   1C43         MOV.W   #0x1, R12
   \   000002   ........     CALLA   #RightCircle
     72            LeftCircle(1);
   \   000006   1C43         MOV.W   #0x1, R12
   \   000008   ........     BRA     #LeftCircle
     73          }

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   FigureEight
        0   -> LeftCircle
        4   -> RightCircle
      8   LeftCircle
        8   -> LeftMotorForward
        8   -> LeftMotorOff
        8   -> RightMotorForward
        8   -> RightMotorOff
        8   -> five_msec_sleep
      8   RightCircle
        8   -> LeftMotorForward
        8   -> LeftMotorOff
        8   -> RightMotorForward
        8   -> RightMotorOff
        8   -> five_msec_sleep
      8   StraightLine
        8   -> LeftMotorForward
        8   -> LeftMotorOff
        8   -> RightMotorForward
        8   -> RightMotorOff
        8   -> five_msec_sleep
      6   Triangle
        6   -> StraightLine
        6   -> TriangleTurn
        6   -> five_msec_sleep
      6   TriangleTurn
        6   -> RightMotorForward
        6   -> RightMotorOff
        6   -> five_msec_sleep


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      12  FigureEight
      46  LeftCircle
      46  RightCircle
      48  StraightLine
      50  Triangle
      22  TriangleTurn

 
 224 bytes in segment CODE
 
 224 bytes of CODE memory

Errors: none
Warnings: none
