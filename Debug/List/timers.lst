###############################################################################
#
# IAR C/C++ Compiler V6.40.1.950/W32 for MSP430           17/Feb/2016  17:52:25
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.40
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\Evan Noble\Desktop\ECE306 Car\timers.c
#    Command line  =  
#        "C:\Users\Evan Noble\Desktop\ECE306 Car\timers.c" -lC "C:\Users\Evan
#        Noble\Desktop\ECE306 Car\Debug\List" -o "C:\Users\Evan
#        Noble\Desktop\ECE306 Car\Debug\Obj" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --debug -D__MSP430FR5739__ -e --double=32
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\430\lib\dlib\dl430xlsfn.h" --core=430X --data_model=small -On
#        --multiplier=32 --hw_workaround=CPU40 --code_model=large
#    List file     =  
#        C:\Users\Evan Noble\Desktop\ECE306 Car\Debug\List\timers.lst
#    Object file   =  
#        C:\Users\Evan Noble\Desktop\ECE306 Car\Debug\Obj\timers.r43
#
###############################################################################

C:\Users\Evan Noble\Desktop\ECE306 Car\timers.c
      1          //------------------------------------------------------------------------------
      2          //  File Name : timers.c
      3          //
      4          //  Description: This file contains the timers
      5          //
      6          //  Evan Noble
      7          //  Jan 2016
      8          //  Built with IAR Embedded Workbench Version: V7.3.1.3987 (6.40.1)
      9          //------------------------------------------------------------------------------
     10          #include "macros.h"
     11          #include "globals.h"
     12          #include "functions.h"
     13          //------------------------------------------------------------------------------
     14          // Function Name: Init_Timers
     15          //
     16          // Description: init timers
     17          //
     18          // Passed: none
     19          // Locals: none
     20          // Returned: none
     21          // Globals: none
     22          //
     23          // Evan Noble
     24          // Jan 2016
     25          // Built with IAR Embedded Workbench Version: V7.3.1.3987 (6.40.1)
     26          //------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2
     27          void Init_Timers(void){
   \                     Init_Timers:
     28          //------------------------------------------------------------------------------
     29          // Timer Configurations
     30          //------------------------------------------------------------------------------
     31            Init_Timer_A0(); //
   \   000000   ........     BRA     #Init_Timer_A0
     32          //  Init_Timer_A1(); // 
     33          //  Init_Timer_B0(); // 
     34          //  Init_Timer_B1(); //  
     35          //  Init_Timer_B2();   //  Required for provided compiled code to work
     36          //------------------------------------------------------------------------------
     37          }
     38          //------------------------------------------------------------------------------
     39          // Function Name: Timer_code
     40          //
     41          // Description: Setups the leds
     42          //
     43          // Passed: none
     44          // Locals: none
     45          // Returned: none
     46          // Globals: Time_Sequence,one_time,five_msec_count
     47          //
     48          // Evan Noble
     49          // Jan 2016
     50          // Built with IAR Embedded Workbench Version: V7.3.1.3987 (6.40.1)
     51          //------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2
     52          void Timer_code(void){
   \                     Timer_code:
     53          //------------------------------------------------------------------------------
     54          // Timer A0 interrupt code
     55          //------------------------------------------------------------------------------
     56            Time_Sequence++;
   \   000000   9253....     ADD.W   #0x1, &Time_Sequence
     57            one_time = ON;
   \   000004   D243....     MOV.B   #0x1, &one_time
     58            if (five_msec_count < VERY_BIG){
   \   000008   B290E803.... CMP.W   #0x3e8, &five_msec_count
   \   00000E   022C         JC      ??Timer_code_0
     59              five_msec_count++;
   \   000010   9253....     ADD.W   #0x1, &five_msec_count
     60            }
     61          //------------------------------------------------------------------------------
     62          }
   \                     ??Timer_code_0:
   \   000014   1001         RETA
     63          //------------------------------------------------------------------------------
     64          // Function Name: five_msec_sleep
     65          //
     66          // Description: sleeps for 5ms
     67          //
     68          // Passed: fivemsec
     69          // Locals: none
     70          // Returned: none
     71          // Globals: five_msec_count
     72          //
     73          // Evan Noble
     74          // Jan 2016
     75          // Built with IAR Embedded Workbench Version: V7.3.1.3987 (6.40.1)
     76          //------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2
     77          void five_msec_sleep(unsigned int fivemsec){
   \                     five_msec_sleep:
     78          //------------------------------------------------------------------------------
     79          //Each count passed is at least x times 5 milliseconds
     80            five_msec_count = CLEAR;
   \   000000   8243....     MOV.W   #0x0, &five_msec_count
     81            while(fivemsec > (five_msec_count+INCREASE));
   \                     ??five_msec_sleep_0:
   \   000004   1F42....     MOV.W   &five_msec_count, R15
   \   000008   1F53         ADD.W   #0x1, R15
   \   00000A   0F9C         CMP.W   R12, R15
   \   00000C   FB2B         JNC     ??five_msec_sleep_0
     82          //------------------------------------------------------------------------------
     83          }
   \   00000E   1001         RETA

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Init_Timers
        0   -> Init_Timer_A0
      4   Timer_code
      4   five_msec_sleep


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  Init_Timers
      22  Timer_code
      16  five_msec_sleep

 
 42 bytes in segment CODE
 
 42 bytes of CODE memory

Errors: none
Warnings: none
